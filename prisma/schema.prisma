generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URLV2")
  directUrl = env("DIRECT_URLV2")
}

model User {
  id          String             @id @default(uuid())
  clerkUserId String             @unique
  email       String             @unique
  name        String?
  imageUrl    String?
  phone       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  role        UserRole           @default(USER)
  dealers     Dealer[]           @relation("UserDealer")
  reviews     Review[]
  testDrives  TestDriveBooking[]
  savedCars   UserSavedCar[]
}

model Dealer {
  id           String        @id @default(uuid())
  name         String
  address      String
  phone        String
  email        String        @unique
  description  String?
  logoUrl      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ownerId      String?
  archived     Boolean       @default(false)
  avgRating    Float?        @default(0)
  reviewCount  Int           @default(0)
  cars         Car[]
  owner        User?         @relation("UserDealer", fields: [ownerId], references: [id])
  reviews      Review[]      @relation("DealerReviews")
  workingHours WorkingHour[]

  @@index([name])
}

model Car {
  id                String             @id @default(uuid())
  make              String
  model             String
  year              Int
  price             Decimal            @db.Decimal(13, 2)
  mileage           Int
  color             String
  fuelType          String
  transmission      String
  bodyType          String
  seats             Int?
  description       String
  status            CarStatus          @default(AVAILABLE)
  featured          Boolean            @default(false)
  images            String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  avgRating         Float?             @default(0)
  countViews        Int                @default(0)
  dealerId          String?
  durationView      Int                @default(0)
  reviewCount       Int                @default(0)
  statusChangedAt   DateTime?
  statusChangedBy   String?
  dealer            Dealer?            @relation(fields: [dealerId], references: [id])
  reviews           Review[]           @relation("CarReviews")
  testDriveBookings TestDriveBooking[]
  savedBy           UserSavedCar[]

  @@index([make, model])
  @@index([bodyType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
  @@index([countViews])
}

model WorkingHour {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  isOpen    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dealerId  String
  openTime  Int
  closeTime Int
  dealer    Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@unique([dealerId, dayOfWeek])
  @@index([dealerId])
  @@index([dayOfWeek])
  @@index([isOpen])
}

model UserSavedCar {
  id      String   @id @default(uuid())
  userId  String
  carId   String
  savedAt DateTime @default(now())
  car     Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model TestDriveBooking {
  id          String        @id @default(uuid())
  carId       String
  userId      String
  bookingDate DateTime      @db.Date
  startTime   String
  endTime     String
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  car         Car           @relation(fields: [carId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([userId])
  @@index([bookingDate])
  @@index([status])
  @@index([carId, bookingDate])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  carId     String?
  dealerId  String?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  car       Car?     @relation("CarReviews", fields: [carId], references: [id], onDelete: Cascade)
  dealer    Dealer?  @relation("DealerReviews", fields: [dealerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([dealerId])
  @@index([rating])
}

enum UserRole {
  USER
  ADMIN
}

enum CarStatus {
  AVAILABLE
  RESERVED
  SOLD
  MAINTENANCE
  PENDING
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
