generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URLV2")
  directUrl = env("DIRECT_URLV2")
}

model User {
  id          String             @id @default(uuid())
  clerkUserId String             @unique
  email       String             @unique
  name        String?
  imageUrl    String?
  phone       String?
  role        UserRole           @default(USER)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  dealers     Dealer[]           @relation("UserDealer")
  reviews     Review[]
  bookings    Booking[]          @relation("UserBookings")
  savedCars   UserSavedCar[]
  purchases   Purchase[]         @relation("UserPurchases")
}

model Dealer {
  id           String        @id @default(uuid())
  name         String
  address      String
  phone        String
  email        String        @unique
  description  String?
  logoUrl      String?
  archived     Boolean       @default(false)
  avgRating    Float?        @default(0)
  reviewCount  Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  ownerId      String?
  owner        User?         @relation("UserDealer", fields: [ownerId], references: [id])
  cars         Car[]
  reviews      Review[]      @relation("DealerReviews")
  workingHours WorkingHour[]
  bookings     Booking[]     @relation("DealerBookings")
  purchases    Purchase[]    @relation("DealerPurchases")

  @@index([name])
}

model Car {
  id                String             @id @default(uuid())
  make              String
  model             String
  year              Int
  color             String
  mileage           Int
  fuelType          String
  transmission      String
  bodyType          String
  seats             Int?
  description       String
  status            CarStatus          @default(AVAILABLE)
  featured          Boolean            @default(false)
  images            String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  avgRating         Float?             @default(0)
  countViews        Int                @default(0)
  durationView      Int                @default(0)
  reviewCount       Int                @default(0)
  statusChangedAt   DateTime?
  statusChangedBy   String?

  dealerId          String?
  dealer            Dealer?            @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  saleInfo          SaleInfo?
  rentInfo          RentInfo?
  bookings          Booking[]          @relation("CarBookings")
  savedBy           UserSavedCar[]
  reviews           Review[]           @relation("CarReviews")
  purchases         Purchase[]         @relation("CarPurchases")

  @@index([make, model])
  @@index([bodyType])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
  @@index([countViews])
}

model SaleInfo {
  id              String      @id @default(uuid())
  carId           String      @unique
  price           Decimal     @db.Decimal(13, 2)
  negotiable      Boolean     @default(false)
  status          SaleStatus  @default(AVAILABLE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  statusChangedAt DateTime?
  statusChangedBy String?

  car             Car         @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([price])
  @@index([status])
}

model RentInfo {
  id              String      @id @default(uuid())
  carId           String      @unique
  hourlyPrice     Decimal     @db.Decimal(13, 2)
  dailyPrice      Decimal?    @db.Decimal(13, 2)
  deposit         Decimal?    @db.Decimal(13, 2)
  available       Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  statusChangedAt DateTime?
  statusChangedBy String?

  car             Car         @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([hourlyPrice])
  @@index([available])
}

model WorkingHour {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  isOpen    Boolean   @default(true)
  openTime  Int
  closeTime Int
  dealerId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  dealer    Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@unique([dealerId, dayOfWeek])
  @@index([dealerId])
  @@index([dayOfWeek])
  @@index([isOpen])
}

model Booking {
  id              String        @id @default(uuid())
  carId           String
  userId          String
  dealerId        String
  bookingType     BookingType   @default(RENTAL)
  bookingDate     DateTime      @db.Date
  startTime       DateTime
  endTime         DateTime
  totalPrice      Decimal?      @db.Decimal(13, 2) // For rentals
  status          BookingStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  statusChangedAt DateTime?
  statusChangedBy String?

  car             Car           @relation("CarBookings", fields: [carId], references: [id], onDelete: Cascade)
  user            User          @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  dealer          Dealer        @relation("DealerBookings", fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([userId])
  @@index([dealerId])
  @@index([bookingDate])
  @@index([status])
  @@index([bookingType])
  @@index([carId, bookingDate])
}

model Purchase {
  id              String         @id @default(uuid())
  carId           String
  userId          String
  dealerId        String
  price           Decimal        @db.Decimal(13, 2)
  status          PurchaseStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  statusChangedAt DateTime?
  statusChangedBy String?

  car             Car            @relation("CarPurchases", fields: [carId], references: [id], onDelete: Cascade)
  user            User           @relation("UserPurchases", fields: [userId], references: [id], onDelete: Cascade)
  dealer          Dealer         @relation("DealerPurchases", fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([userId])
  @@index([dealerId])
  @@index([status])
}

model UserSavedCar {
  id      String   @id @default(uuid())
  userId  String
  carId   String
  savedAt DateTime @default(now())

  car     Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  carId     String?
  dealerId  String?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  car       Car?     @relation("CarReviews", fields: [carId], references: [id], onDelete: Cascade)
  dealer    Dealer?  @relation("DealerReviews", fields: [dealerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([dealerId])
  @@index([rating])
}

enum UserRole {
  USER
  ADMIN
}

enum CarStatus {
  AVAILABLE
  RESERVED
  SOLD
  RENTED
  MAINTENANCE
  PENDING
}

enum SaleStatus {
  AVAILABLE
  RESERVED
  SOLD
  NEGOTIATION
}

enum PurchaseStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum BookingType {
  RENTAL
  TEST_DRIVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}